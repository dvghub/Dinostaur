private $conn = null;
private $isConnected = false;

public function isConnected() {
    return $this->isConnected;
}

public function connect() {
    $db_host = '127.0.0.1';
    $db_username = 'sql_manager';
    $db_password = 'lookatmeimastrongpassword';
    $db_name = 'dinostaur';

    $this->conn = new PDO('mysql:host='.$db_host.';dbname='.$db_name, $db_username, $db_password);
    $this->conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
    return $this;
}

public function getUserByEmail($email) {
    $stmt = $this->conn->prepare('SELECT * FROM users WHERE email = :email');
    $stmt->bindParam(':email', $email);
    $stmt->execute();
    return $stmt->fetch(PDO::FETCH_ASSOC);
}

public function saveUser($email, $name, $password) {
    $stmt = $this->conn->prepare('INSERT INTO users (email, name, password) VALUES (:email, :name, :password)');
    $stmt->bindParam(':email', $email);
    $stmt->bindParam(':name', $name);
    $stmt->bindParam(':password', $password);
    return $stmt->execute();
}

public function categories() {
    $stmt = $this->conn->prepare('DESCRIBE products tags');
    $stmt->execute();
    $result = $stmt->fetch(PDO::FETCH_ASSOC);
    $result = str_replace('set(', '', $result['Type']);
    $result = str_replace(')', '', $result);
    $result = str_replace('\'', '', $result);
    $result = explode(',', $result);
    return $result;
}

public function upload($name, $image, $price, $description, $tags) {
    $stmt = $this->conn->prepare('INSERT INTO products (name, image, price, description, tags)
                                  VALUES (:name, img/:image, :price, :description, :tags)');
    $stmt->bindParam(':name', $name);
    $stmt->bindParam(':image', $image);
    $stmt->bindParam(':price', $price);
    $stmt->bindParam(':description', $description);
    $stmt->bindParam(':tags', $tags);
    return $stmt->execute();
}

public function edit($id, $name, $image, $price, $description, $tags, $time) {
    $stmt = $this->conn->prepare('UPDATE products SET name = :name, image = :image, price = :price,
                                  description = :description, tags = all:tags, last_edited = :time');
    $stmt->bindParam(':id', $id);
    $stmt->bindParam(':name', $name);
    $stmt->bindParam(':image', $image);
    $stmt->bindParam(':price', $price);
    $stmt->bindParam(':description', $description);
    $stmt->bindParam(':tags', $tags);
    $stmt->bindParam(':time', $time);
    return $stmt->execute();
}

public function getProductByCat($category) {
    $stmt = $this->conn->prepare('SELECT * FROM products WHERE tags LIKE :category');
    $stmt->bindParam(':category', $category);
    $stmt->execute();
    return $stmt->fetch(PDO::FETCH_ASSOC);
}

public function getProductByID($id) {
    $stmt = $this->conn->prepare('SELECT * FROM products WHERE id = :id');
    $stmt->bindParam(':id', $id);
    $stmt->execute();
    return $stmt->fetch(PDO::FETCH_ASSOC);
}

public function getInfoByName($name) {
    $stmt = $this->conn->prepare('SELECT id, image, last_edited FROM products WHERE name = :name');
    $stmt->bindParam(':name', $name);
    $stmt->execute();
    return $stmt->fetch(PDO::FETCH_ASSOC);
}

public function getMostSold($howmany) {
    $stmt = $this->conn->prepare('SELECT order_products.product_id, SUM(order_products.product_amount) AS total, products.name
        FROM order_products
        LEFT JOIN products ON order_products.product_id = products.id
        WHERE order_products.order_id IN (SELECT orders.id FROM orders WHERE orders.date >= ADDDATE(CURRENT_DATE(), INTERVAL -1 WEEK))
        GROUP BY order_products.product_id
        ORDER BY total DESC
        LIMIT :howmany');
    $stmt->bindParam(':howmany', $howmany);
    $stmt->execute();
    return $stmt->fetch(PDO::FETCH_ASSOC);
}

public function saveOrdered($total, $products, $customer_id) {
    $stmt = $this->conn->prepare('INSERT INTO orders (total_price, customer_id, date) VALUES (:total, :customer_id, CURRENT_DATE())');
    $stmt->bindParam(':total', $total);
    $stmt->bindParam(':customer_id', $customer_id);
    if ($stmt->execute()) {
        $order_id = $this->conn->lastInsertId();
        foreach ($products as $id=>$amount) {
            $stmt = $this->conn->prepare('INSERT INTO order_products (order_id, product_id, product_amount) VALUES (:order_id, :product_id, :amount)');
            $stmt->bindParam(':order_id', $order_id);
            $stmt->bindParam(':product_id', $id);
            $stmt->bindParam(':product_amount', $amount);
            $stmt->execute();
            return $order_id;
        }
    }
}